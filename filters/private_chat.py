from aiogram import types
from aiogram.dispatcher.filters import BoundFilter


class IsPrivate(BoundFilter):
    async def check(self, message: types.Message):
        return message.chat.type == types.ChatType.PRIVATE


# class IsPrivate(BoundFilter):
#     async def check(self, message: types.Message):
#         if message.chat.type != types.ChatType.PRIVATE:
#             await message.answer('–≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ,\n'
#                                  '—Ç–∏–ø —á–∞—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º.\n'
#                                  '–í –æ–±—â–µ–º, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –º–Ω–µ –≤ –ª–∏—á–∫—É.üòé')
#         else:
#             return message.chat.type == types.ChatType.PRIVATE


# CallbackQuery example for private messages
# class IsPrivate(BoundFilter):
#     async def check(self, call: types.CallbackQuery):
#         return call.message.chat.type == types.ChatType.PRIVATE
