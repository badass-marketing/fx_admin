import time

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from filters import IsPrivate
from keyboards.default.kb_admin import kb_admin_hub
from loader import dp

from lead_parser.gmail_parser import *
from keyboards.default import kb_start, kb_worker_data, kb_worker_menu, kb_test, kb_worker_back, kb_admin_data, kb_admin_start
from lead_parser.gmail_parser import get_all_unread_json
from data.config import admins
from keyboards.default import kb_admin_squad


# @dp.message_handler(text='Get Leads')
# async def buttons_test(message: types.Message):
#     await message.answer(f'Hey {message.from_user.username}! \n'
#                          f'{message.text} is a  working function.\n'
#                          'Its not working for now.\n'
#                          'Have patience.')
from states import Accept
from utils.db_api.worker_commands import select_accepted_workers, select_created_workers, select_online_workers, \
    get_workers_online


@dp.message_handler(IsPrivate(), text='–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', user_id=admins)
async def buttons_test(message: types.Message):
    await message.answer(f'–≠–π {message.from_user.username}! \n'
                         f'–¢—ã –≤—ã–±—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏—é {message.text}.\n'
                         '–ë–µ—Ä–µ–∂–Ω–æ –æ–±—Ä–∞—â–∞–π—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏.\n'
                         '–û–Ω–∏ –¥–µ–Ω–µ–≥ —Å—Ç–æ—è—Ç.', reply_markup=kb_admin_data)


@dp.message_handler(IsPrivate(), text='–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', user_id=admins)
async def buttons_test(message: types.Message):
    result = []
    await message.answer('–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º...')

    get_all_unread_json()

    with open("/Users/pax/PycharmProjects/fx24_tg_admin/lead_parser/storage/result.json") as file:
        forms_data = json.load(file)
        print(forms_data)

    for form_data in forms_data:
        date = form_data['date']
        time = form_data['time']
        name = form_data['lead_name']
        email = form_data['email']
        phone = form_data['phone']
        source = form_data['source']
        pole_data = form_data['pole_data']

        array = [date, time, name, email, phone, source, pole_data]
        result.append(array)

        with open("/Users/pax/PycharmProjects/fx24_tg_admin/lead_parser/storage/result.csv", "w") as file:
            writer = csv.writer(file)  # delimeter can be present

            writer.writerow(
                (
                    'Date',
                    'Time',
                    'Name',
                    'Email',
                    'Phone Number',
                    'Client Source',
                    'Pole Data'
                )
            )

            writer.writerows(
                result
            )

    await message.reply_document(open('/Users/pax/PycharmProjects/fx24_tg_admin/lead_parser/storage/result.csv', 'rb'))
    await message.answer("–í–∞—à –¥–æ–≥—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.\n"
                         "–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ?"
                         )


# @dp.message_handler(text='–ö–Ω–∏–≥–∞')
# async def buttons_test(message: types.Message):
#     await message.answer('–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...')
#     await get_books_from_gmail_api()
#
#
#     await message.reply_document(open('lead_parser/storage/result.csv', 'rb'))
#     await message.answer("–í–∞—à –¥–æ–≥—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.\n"
#                          "–ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏?\n"
#                          "–û—Ç–º–µ—Ç—è—Ç—Å—è –í–°–ï –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!")
#
#
# @dp.message_handler(text='–ò–ª–æ–Ω')
# async def buttons_test(message: types.Message):
#     await message.answer('–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...')
#     await get_ilon()
#
#     await message.reply_document(open('lead_parser/storage/result.csv', 'rb'))
#     await message.answer("–í–∞—à –¥–æ–≥—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.\n"
#                          "–ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏?\n"
#                          "–û—Ç–º–µ—Ç—è—Ç—Å—è –í–°–ï –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!")
#
#
# @dp.message_handler(text='–ú–∞—Ä–≥—É–ª–∞–Ω')
# async def buttons_test(message: types.Message):
#     await message.answer('–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª...')
#     await get_margulan()
#
#     await message.reply_document(open('lead_parser/storage/result.csv', 'rb'))
#     await message.answer("–í–∞—à –¥–æ–≥—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤.\n"
#                          "–ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏?\n"
#                          "–û—Ç–º–µ—Ç—è—Ç—Å—è –í–°–ï –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ!")


@dp.message_handler(text='–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏')
async def buttons_test(message: types.Message):
    await message.answer('–ß–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...')

    await mark_as_read()
    await message.answer('–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã!', reply_markup=kb_admin_start)
    await message.delete()


@dp.message_handler(text='–ù–∞–∑–∞–¥')
async def buttons_test(message: types.Message):
    await message.answer(f'–í–æ—É {message.from_user.username}! \n'
                         f'–ú—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏?', reply_markup=kb_admin_start)


@dp.message_handler(text='[*]SMS Bomber')
async def buttons_test(message: types.Message):
    await message.answer(f'Hey {message.from_user.username}! \n'
                         f'{message.text} is a Function\nto make a joke on a friend or punish a bad personüòà.\n'
                         'Its not working for now.\n'
                         'Have patience.')


@dp.message_handler(text="–ú–æ–π SuiSquad")
async def my_squad(message: types.Message):
    await message.answer("–ó–∞–≥–ª—è–Ω–µ–º –≤ —É–ª–µ–π.", reply_markup=kb_admin_squad)


@dp.message_handler(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—á–µ–ª "–æ–Ω–ª–∞–π–Ω"')
async def my_desk_online(message: types.Message):
    worker = await get_workers_online()
    for bee in worker:
        await message.answer(f"status: {bee.status}\n"
                             f"Name: {bee.user_name}")
        # else:
        #     await message.answer("–ù–µ—Ç –Ω–∏–∫–æ–≥–æ –æ–Ω–ª–∞–π–Ω.\n"
        #                          "–°–µ–≥–æ–¥–Ω—è —É–∏–∫–µ–Ω–¥ —á—Ç–æ –ª–∏?üßê")


@dp.message_handler(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ —É–ª–µ–π", user_id=admins)
async def all_created_workers(message: types.Message):
    worker = await select_created_workers()
    ikb = InlineKeyboardMarkup(row_width=1,
                               inline_keyboard=[
                                   [
                                       InlineKeyboardButton(text="Accept",
                                                            callback_data='accept'),
                                       InlineKeyboardButton(text="Decline",
                                                            callback_data='decline')
                                   ]
                               ])
    for bee in worker:
        await message.answer(f"User-Name: {bee.user_name}\n"
                             f"Name: {bee.first_name}"
                             f"Status: {bee.status}\n"
                             f"ID: {bee.user_id}",
                             reply_markup=ikb)


@dp.callback_query_handler(text='accept')
async def accept_w_reg(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    await Accept.user_id.set()


@dp.callback_query_handler(text='decline')
async def decline_w_reg(call: types.CallbackQuery):
    await call.message.answer()



@dp.message_handler(text="–ú–æ–π –õ–∏–¥ –•–∞–±")
async def lead_hub(message: types.Message):
    await message.answer("–ü–æ–≥–ª—è–¥–∏–º –µ—Å—Ç—å —á—Ç–æ —É –Ω–∞—Å –∑–¥–µ—Å—å...", reply_markup=kb_admin_hub)


# @dp.message_handler(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
# async def apply_new_leadforms(message: types.Message):
