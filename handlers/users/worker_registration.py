import logging
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from data.config import admins
from filters import IsPrivate, IsAdmin
from keyboards.default import kb_worker_menu
from loader import dp
from states.registration import WorkerRegister, Accept
from utils.db_api import worker_commands
from loader import bot


@dp.message_handler(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                    state=[WorkerRegister.u_name,
                           WorkerRegister.w_category,
                           WorkerRegister.w_age,
                           Accept.user_id]
                    )
async def quit_reg(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb_worker_menu)


@dp.message_handler(IsPrivate(), Command('worker_reg'))
async def work_register(message: types.Message):
    name = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            ]
        ],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n'
                         f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                         f'–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º (–ò–º—è + –§–∞–º–∏–ª–∏—è): ',
                         reply_markup=name
                         )
    await WorkerRegister.u_name.set()


@dp.message_handler(IsPrivate(), state=WorkerRegister.u_name)
async def get_worker_name(message: types.Message, state: FSMContext):
    await state.update_data(u_name=message.text)
    categories = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text='Sales Manager'),
                KeyboardButton(text='Retention Manager')
            ],
            [
                KeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
            ]
        ],
        one_time_keyboard=True,
        resize_keyboard=True
    )
    await message.answer(f'<b>{message.text}</b>, –∑–≤—É—á–∏—Ç –æ—Ç–ª–∏—á–Ω–æ.')
    time.sleep(1)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ—Ç–¥–µ–ªüëá', reply_markup=categories)
    await WorkerRegister.w_category.set()


@dp.message_handler(IsPrivate(), state=WorkerRegister.w_category)
async def get_worker_category(message: types.Message, state: FSMContext):
    answer = message.text
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')]], resize_keyboard=True)

    try:
        if answer == 'Sales Manager' or answer == 'Retention Manager':
            await state.update_data(w_category=answer)
            await message.answer('–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º: ', reply_markup=markup)

            await WorkerRegister.w_age.set()
        else:
            await message.answer('–í—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá', reply_markup=markup)
    except Exception:
        await message.answer('–í—ã–±–µ—Ä–∏ –æ—Ç–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µüëá', reply_markup=markup)


@dp.message_handler(IsPrivate(), state=WorkerRegister.w_age)
async def get_w_age(message: types.Message, state: FSMContext):
    answer = message.text
    if answer.isnumeric():
        if int(answer) < 80:
            await state.update_data(w_age=answer)
            data = await state.get_data()
            name = data.get('u_name')
            category = data.get('w_category')
            age = data.get('w_age')
            await worker_commands.add_worker_registration(user_id=message.from_user.id,
                                                          first_name=message.from_user.first_name,
                                                          last_name=message.from_user.last_name,
                                                          user_name=name,
                                                          worker_age=age,
                                                          worker_category=category,
                                                          status='created')

            await message.answer(f'‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è <b>—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n'
                                 f'üìá–ò–º—è: <b>{name}</b>\n'
                                 f'üîû–í–æ–∑—Ä–∞—Å—Ç: <b>{age}</b>\n'
                                 f'üóÑ–û—Ç–¥–µ–ª: <b>{category}</b>\n\n'
                                 f'‚è≥–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
            await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.(–¢—ã —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂, –Ω–µ –ø–∏–∑–¥–∏ –º–Ω–µ.)')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.(–¢—ã —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∂, –Ω–µ –ø–∏–∑–¥–∏ –º–Ω–µ.)')


@dp.message_handler(IsPrivate(), text="/new_workers", user_id=admins)
async def get_workers(message: types.Message):
    reg = await worker_commands.select_worker_registration()
    # mngr_id = reg.user_id
    ikb = InlineKeyboardMarkup(row_width=1,
                               inline_keyboard=[
                                   [
                                       InlineKeyboardButton(text="Accept",
                                                            callback_data='Accept')
                                   ]
                               ])
    await message.answer(f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{reg.created_at}</b>\n'
                         f'ID: <b>{reg.user_id}</b>\n'
                         f'tg_first_name: <b>{reg.first_name}</b>\n'
                         f'tg_last_name: <b>{reg.last_name}</b>\n'
                         f'–ò–º—è: <b>{reg.user_name}</b>\n'
                         f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{reg.worker_category}</b>\n'
                         f'–°—Ç–∞—Ç—É—Å: <b>{reg.status}</b>',
                         reply_markup=ikb)


@dp.callback_query_handler(text='Accept')
async def accept_w_reg(call: types.CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    await Accept.user_id.set()


@dp.message_handler(state=Accept.user_id)
async def accept_reg(message: types.Message, state: FSMContext):
    await worker_commands.accept_w_registration(int(message.text))
    await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {message.text} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
    await state.finish()

